// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace Infrastructure.Database;

public partial class KycDBContext : DbContext
{
    public KycDBContext(DbContextOptions<KycDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AuthLog> AuthLogs { get; set; }

    public virtual DbSet<BiometricAccessOperation> BiometricAccessOperations { get; set; }

    public virtual DbSet<BiometricAccessServiceType> BiometricAccessServiceTypes { get; set; }

    public virtual DbSet<BiometricProfile> BiometricProfiles { get; set; }

    public virtual DbSet<BiometricProfileHistory> BiometricProfileHistories { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<DefaultHandler> DefaultHandlers { get; set; }

    public virtual DbSet<DefaultVerifier> DefaultVerifiers { get; set; }

    public virtual DbSet<DocumentType> DocumentTypes { get; set; }

    public virtual DbSet<Handler> Handlers { get; set; }

    public virtual DbSet<IdentificationLog> IdentificationLogs { get; set; }

    public virtual DbSet<KycOperation> KycOperations { get; set; }

    public virtual DbSet<KycSdkOperation> KycSdkOperations { get; set; }

    public virtual DbSet<KycServiceType> KycServiceTypes { get; set; }

    public virtual DbSet<ManualAccess> ManualAccesses { get; set; }

    public virtual DbSet<ParentPartner> ParentPartners { get; set; }

    public virtual DbSet<Partner> Partners { get; set; }

    public virtual DbSet<PartnerBiometricAccessServiceType> PartnerBiometricAccessServiceTypes { get; set; }

    public virtual DbSet<PartnerKycServiceType> PartnerKycServiceTypes { get; set; }

    public virtual DbSet<PartnersVendorsSolution> PartnersVendorsSolutions { get; set; }

    public virtual DbSet<Sdksession> Sdksessions { get; set; }

    public virtual DbSet<Sdkuser> Sdkusers { get; set; }

    public virtual DbSet<SimaData> SimaDatas { get; set; }

    public virtual DbSet<SimaDataLog> SimaDataLogs { get; set; }

    public virtual DbSet<SolutionType> SolutionTypes { get; set; }

    public virtual DbSet<Translation> Translations { get; set; }

    public virtual DbSet<UniversalBiometricOperation> UniversalBiometricOperations { get; set; }

    public virtual DbSet<UniversalBiometricOperationToProfile> UniversalBiometricOperationToProfiles { get; set; }

    public virtual DbSet<UniversalBiometricProfile> UniversalBiometricProfiles { get; set; }

    public virtual DbSet<UniversalBiometricServiceType> UniversalBiometricServiceTypes { get; set; }

    public virtual DbSet<UniversalBiometricServiceTypePartner> UniversalBiometricServiceTypePartners { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<Verifier> Verifiers { get; set; }

    public virtual DbSet<Vlrule> Vlrules { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AuthLog>(entity =>
        {
            entity.Property(e => e.AddedDate).HasColumnType("datetime");
            entity.Property(e => e.Source).HasMaxLength(50);
        });

        modelBuilder.Entity<BiometricAccessOperation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("BiometricAccessOperations_pk");

            entity.HasIndex(e => new { e.PartnerId, e.IdempotencyKey }, "IX_PartnerId_IdempotencyKey")
                .IsUnique()
                .HasFilter("([IdempotencyKey] IS NOT NULL)");

            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.AuthScheme).HasMaxLength(50);
            entity.Property(e => e.BirthAddress).HasMaxLength(200);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.DeviceInfo).HasMaxLength(250);
            entity.Property(e => e.DocumentNumber).HasMaxLength(50);
            entity.Property(e => e.DocumentType).HasMaxLength(200);
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.FaceDetectionReason).HasMaxLength(200);
            entity.Property(e => e.Gender).HasMaxLength(200);
            entity.Property(e => e.IdempotencyKey).HasMaxLength(50);
            entity.Property(e => e.IpAddress).HasMaxLength(100);
            entity.Property(e => e.IssuingCountry).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Nationality).HasMaxLength(50);
            entity.Property(e => e.Organization).HasMaxLength(200);
            entity.Property(e => e.Patronymic).HasMaxLength(200);
            entity.Property(e => e.Pin).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(200);
            entity.Property(e => e.Uid)
                .HasMaxLength(50)
                .HasColumnName("UId");

            entity.HasOne(d => d.BiometricProfile).WithMany(p => p.BiometricAccessOperations)
                .HasForeignKey(d => d.BiometricProfileId)
                .HasConstraintName("BiometricAccessOperations_BiometricProfiles_Id_fk");

            entity.HasOne(d => d.Partner).WithMany(p => p.BiometricAccessOperations)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("BiometricAccessOperations_Partners_Id_fk");

            entity.HasOne(d => d.ServiceTypeNavigation).WithMany(p => p.BiometricAccessOperations)
                .HasForeignKey(d => d.ServiceType)
                .HasConstraintName("BiometricAccessOperations_BiometricAccessServiceTypes_Id_fk");

            entity.HasOne(d => d.Vendor).WithMany(p => p.BiometricAccessOperations)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("BiometricAccessOperations_Vendors_Id_fk");
        });

        modelBuilder.Entity<BiometricAccessServiceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("BiometricAccessServiceTypes_pk");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<BiometricProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BiometricProfile");

            entity.HasIndex(e => e.Pin, "BiometricProfiles_pk").IsUnique();

            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsBlocked).HasDefaultValue(false);
            entity.Property(e => e.Pin).HasMaxLength(50);
        });

        modelBuilder.Entity<BiometricProfileHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("BiometricProfileHistories_pk2");

            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.BirthAddress).HasMaxLength(200);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.Citizenship).HasMaxLength(50);
            entity.Property(e => e.DocumentNumber).HasMaxLength(50);
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.Gender).HasMaxLength(200);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IssuingCountry).HasMaxLength(200);
            entity.Property(e => e.MigrationDocumentType).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Organization).HasMaxLength(200);
            entity.Property(e => e.Patronymic).HasMaxLength(100);
            entity.Property(e => e.Surname).HasMaxLength(200);

            entity.HasOne(d => d.BiometricProfile).WithMany(p => p.BiometricProfileHistories)
                .HasForeignKey(d => d.BiometricProfileId)
                .HasConstraintName("BiometricProfileHistories_BiometricProfiles_Id_fk");

            entity.HasOne(d => d.DocumentType).WithMany(p => p.BiometricProfileHistories)
                .HasForeignKey(d => d.DocumentTypeId)
                .HasConstraintName("BiometricProfileHistories_DocumentTypes_Id_fk");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.Birth).HasColumnType("datetime");
            entity.Property(e => e.BirthAddress).HasMaxLength(200);
            entity.Property(e => e.DocumentNumber).HasMaxLength(50);
            entity.Property(e => e.FaceId).HasMaxLength(100);
            entity.Property(e => e.Gender).HasMaxLength(50);
            entity.Property(e => e.LivePhoto).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Patronymic).HasMaxLength(50);
            entity.Property(e => e.Pin).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(50);
            entity.Property(e => e.Uid)
                .HasMaxLength(100)
                .HasColumnName("UId");

            entity.HasOne(d => d.BiometricProfile).WithMany(p => p.Customers)
                .HasForeignKey(d => d.BiometricProfileId)
                .HasConstraintName("Customers_BiometricProfiles_Id_fk");

            entity.HasOne(d => d.Partner).WithMany(p => p.Customers)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("Customers_Partners_Id_fk");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Customers)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("Customers_Vendors_Id_fk");
        });

        modelBuilder.Entity<DefaultHandler>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("DefaultHandlers_pk");

            entity.Property(e => e.ExternalId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Key)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Main).HasDefaultValue(true);
        });

        modelBuilder.Entity<DefaultVerifier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DefaultV__3214EC07A922D106");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ExternalId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Key)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Main).HasDefaultValue(true);
        });

        modelBuilder.Entity<DocumentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DocumentType");

            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<Handler>(entity =>
        {
            entity.Property(e => e.LivenessThreshold).HasColumnName("liveness_threshold");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Url).HasMaxLength(250);
            entity.Property(e => e.VlhandlerId)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("VLHandlerId");
        });

        modelBuilder.Entity<IdentificationLog>(entity =>
        {
            entity.Property(e => e.Pin).HasMaxLength(50);
            entity.Property(e => e.ProcessDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<KycOperation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_KycTransactions");

            entity.HasIndex(e => new { e.PartnerId, e.IdempotencyKey }, "IX_PartnerId_IdempotencyKey")
                .IsUnique()
                .HasFilter("([IdempotencyKey] IS NOT NULL)");

            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.AuthScheme).HasMaxLength(50);
            entity.Property(e => e.BirthAddress).HasMaxLength(200);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.DeviceInfo).HasMaxLength(250);
            entity.Property(e => e.DocumentNumber).HasMaxLength(50);
            entity.Property(e => e.DocumentType).HasMaxLength(200);
            entity.Property(e => e.ErrorMessage).HasMaxLength(100);
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.FaceDetectionReason).HasMaxLength(200);
            entity.Property(e => e.Gender).HasMaxLength(200);
            entity.Property(e => e.IdempotencyKey).HasMaxLength(50);
            entity.Property(e => e.IpAddress).HasMaxLength(100);
            entity.Property(e => e.IssuingCountry).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Nationality).HasMaxLength(50);
            entity.Property(e => e.Organization).HasMaxLength(200);
            entity.Property(e => e.Patronymic).HasMaxLength(200);
            entity.Property(e => e.Pin).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(200);
            entity.Property(e => e.Uid)
                .HasMaxLength(50)
                .HasColumnName("UId");
            entity.Property(e => e.Voen)
                .HasMaxLength(100)
                .HasColumnName("VOEN");

            entity.HasOne(d => d.AccessOperation).WithMany(p => p.KycOperations)
                .HasForeignKey(d => d.AccessOperationId)
                .HasConstraintName("KycOperations_BiometricAccessOperations_Id_fk");

            entity.HasOne(d => d.BiometricProfile).WithMany(p => p.KycOperations)
                .HasForeignKey(d => d.BiometricProfileId)
                .HasConstraintName("KycOperations_BiometricProfiles_Id_fk");

            entity.HasOne(d => d.GlobalDocumentType).WithMany(p => p.KycOperations)
                .HasForeignKey(d => d.GlobalDocumentTypeId)
                .HasConstraintName("KycOperations_DocumentTypes_Id_fk2");

            entity.HasOne(d => d.Partner).WithMany(p => p.KycOperations)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("KycOperations_Partners_Id_fk");

            entity.HasOne(d => d.ServiceTypeNavigation).WithMany(p => p.KycOperations)
                .HasForeignKey(d => d.ServiceType)
                .HasConstraintName("KycOperations_KycServiceTypes_Id_fk");

            entity.HasOne(d => d.Vendor).WithMany(p => p.KycOperations)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("KycOperations_Vendors_Id_fk");
        });

        modelBuilder.Entity<KycSdkOperation>(entity =>
        {
            entity.HasIndex(e => new { e.FirstImageChecksum, e.SecondImageChecksum }, "IDX_KYC_Image_Hashes");

            entity.HasIndex(e => new { e.FirstImageChecksum, e.SecondImageChecksum }, "UQ_First_Second_Image_Hash").IsUnique();

            entity.Property(e => e.FirstImage).HasColumnType("text");
            entity.Property(e => e.FirstImageChecksum)
                .HasMaxLength(32)
                .IsFixedLength();
            entity.Property(e => e.FirstImageS3).HasColumnType("text");
            entity.Property(e => e.FirstVerificationLivenessScore).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.FirstVerificationSimilarityScore).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.IamasImage).HasColumnType("text");
            entity.Property(e => e.IamasImageS3).HasColumnType("text");
            entity.Property(e => e.SecondImage).HasColumnType("text");
            entity.Property(e => e.SecondImageChecksum)
                .HasMaxLength(32)
                .IsFixedLength();
            entity.Property(e => e.SecondImageS3).HasColumnType("text");
            entity.Property(e => e.SecondVerificationLivenessScore).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.SecondVerificationSimilarityScore).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.SessionId)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Started).HasColumnType("datetime");
        });

        modelBuilder.Entity<KycServiceType>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ManualAccess>(entity =>
        {
            entity.ToTable("ManualAccess");

            entity.Property(e => e.AddedDate).HasColumnType("datetime");
            entity.Property(e => e.Image)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Pin)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.BiometricAccessOperation).WithMany(p => p.ManualAccesses)
                .HasForeignKey(d => d.BiometricAccessOperationId)
                .HasConstraintName("ManualAccess_BiometricAccessOperations_Id_fk");

            entity.HasOne(d => d.KycOperation).WithMany(p => p.ManualAccesses)
                .HasForeignKey(d => d.KycOperationId)
                .HasConstraintName("ManualAccess_KycOperations_Id_fk");

            entity.HasOne(d => d.Partner).WithMany(p => p.ManualAccesses)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ManualAccess_Partners_Id_fk");

            entity.HasOne(d => d.SolutionType).WithMany(p => p.ManualAccesses)
                .HasForeignKey(d => d.SolutionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ManualAccess_SolutionTypes_Id_fk");
        });

        modelBuilder.Entity<ParentPartner>(entity =>
        {
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Status).HasDefaultValue(true);
        });

        modelBuilder.Entity<Partner>(entity =>
        {
            entity.Property(e => e.AuthRequired).HasDefaultValue(true);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.DocumentDataVisibility).HasDefaultValue(true);
            entity.Property(e => e.IdempotencyKey).HasMaxLength(100);
            entity.Property(e => e.MasterKey).HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.PinOnlyServiceAccess).HasDefaultValue(false);
            entity.Property(e => e.SdkPartner).HasDefaultValue(false);
            entity.Property(e => e.Status).HasDefaultValue((byte)1);
            entity.Property(e => e.Tin)
                .HasMaxLength(50)
                .HasColumnName("TIN");
            entity.Property(e => e.TrialRequestLimit).HasDefaultValueSql("(NULL)");

            entity.HasOne(d => d.Parent).WithMany(p => p.Partners)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("Partners_ParentPartners_Id_fk");
        });

        modelBuilder.Entity<PartnerBiometricAccessServiceType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartnerBiometricAccessServiceType");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();

            entity.HasOne(d => d.BiometricAccessServiceType).WithMany()
                .HasForeignKey(d => d.BiometricAccessServiceTypeId)
                .HasConstraintName("PartnerBiometricAccessServiceType_BiometricAccessServiceTypes_Id_fk");

            entity.HasOne(d => d.Partner).WithMany()
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PartnerBiometricAccessServiceType_Partners_Id_fk");
        });

        modelBuilder.Entity<PartnerKycServiceType>(entity =>
        {
            entity.ToTable("PartnerKycServiceType");

            entity.HasOne(d => d.KycServiceType).WithMany(p => p.PartnerKycServiceTypes)
                .HasForeignKey(d => d.KycServiceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PartnerKycServiceType_KycServiceTypes_Id_fk");

            entity.HasOne(d => d.Partner).WithMany(p => p.PartnerKycServiceTypes)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PartnerKycServiceType_Partners_Id_fk");
        });

        modelBuilder.Entity<PartnersVendorsSolution>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PartnersVendorsSolutions_pk");

            entity.HasOne(d => d.Partner).WithMany(p => p.PartnersVendorsSolutions)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PartnersVendorsSolutions_Partners_Id_fk");

            entity.HasOne(d => d.SolutionType).WithMany(p => p.PartnersVendorsSolutions)
                .HasForeignKey(d => d.SolutionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PartnersVendorsSolutions_SolutionTypes_Id_fk");

            entity.HasOne(d => d.Vendor).WithMany(p => p.PartnersVendorsSolutions)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PartnersVendorsSolutions_Vendors_Id_fk");
        });

        modelBuilder.Entity<Sdksession>(entity =>
        {
            entity.ToTable("SDKSessions");

            entity.Property(e => e.DocumentNumber).HasMaxLength(50);
            entity.Property(e => e.Image).HasColumnType("text");
            entity.Property(e => e.Jti)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("JTI");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.PartnerTransactionId).IsUnicode(false);
            entity.Property(e => e.Pin).HasMaxLength(50);
            entity.Property(e => e.SessionKey)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Started).HasColumnType("datetime");
            entity.Property(e => e.Surname).HasMaxLength(50);
        });

        modelBuilder.Entity<Sdkuser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SDKUsers__3214EC07836D2852");

            entity.ToTable("SDKUsers");

            entity.Property(e => e.CallbackUrl)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("CallbackURL");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Salt)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SimaData>(entity =>
        {
            entity.Property(e => e.CustomerKey).IsRequired();
            entity.Property(e => e.CustomerName).IsRequired();
        });

        modelBuilder.Entity<SimaDataLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SimaKYCTransactions");

            entity.ToTable(tb => tb.HasTrigger("trg_InsertIntoKycOperations"));

            entity.Property(e => e.CustomerKey).IsRequired();
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Uid)
                .HasMaxLength(100)
                .HasColumnName("UId");
        });

        modelBuilder.Entity<SolutionType>(entity =>
        {
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Translation>(entity =>
        {
            entity.Property(e => e.AddedAt).HasColumnType("datetime");
            entity.Property(e => e.AddedBy).HasMaxLength(200);
            entity.Property(e => e.DefaultDescription).HasMaxLength(500);
            entity.Property(e => e.DescAze)
                .HasMaxLength(500)
                .HasColumnName("DescAZE");
            entity.Property(e => e.DescEng)
                .HasMaxLength(500)
                .HasColumnName("DescENG");
            entity.Property(e => e.DescRus)
                .HasMaxLength(500)
                .HasColumnName("DescRUS");
            entity.Property(e => e.TranslationKey).HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy).HasMaxLength(200);
        });

        modelBuilder.Entity<UniversalBiometricOperation>(entity =>
        {
            entity.HasIndex(e => new { e.PartnerId, e.IdempotencyKey }, "IX_PartnerId_IdempotencyKey")
                .IsUnique()
                .HasFilter("([IdempotencyKey] IS NOT NULL)");

            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.AuthScheme).HasMaxLength(50);
            entity.Property(e => e.BirthAddress).HasMaxLength(200);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.DeviceInfo).HasMaxLength(250);
            entity.Property(e => e.DocumentNumber).HasMaxLength(50);
            entity.Property(e => e.ErrorMessage).HasMaxLength(100);
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.Gender).HasMaxLength(50);
            entity.Property(e => e.IdempotencyKey).HasMaxLength(50);
            entity.Property(e => e.IpAddress).HasMaxLength(100);
            entity.Property(e => e.IssuingCountry).HasMaxLength(200);
            entity.Property(e => e.MatchedCandidatesCount).HasDefaultValue(0);
            entity.Property(e => e.MigrationDocumentType).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Nationality).HasMaxLength(50);
            entity.Property(e => e.Organization).HasMaxLength(200);
            entity.Property(e => e.Patronymic).HasMaxLength(100);
            entity.Property(e => e.PersonId).HasMaxLength(100);
            entity.Property(e => e.Pin).HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(100);

            entity.HasOne(d => d.DocumentType).WithMany(p => p.UniversalBiometricOperations)
                .HasForeignKey(d => d.DocumentTypeId)
                .HasConstraintName("UniversalBiometricOperations_DocumentTypes_Id_fk");

            entity.HasOne(d => d.Partner).WithMany(p => p.UniversalBiometricOperations)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("UniversalBiometricOperations_Partners_Id_fk");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.UniversalBiometricOperations)
                .HasForeignKey(d => d.ServiceTypeId)
                .HasConstraintName("UniversalBiometricOperations_UniversalBiometricServiceTypes_Id_fk");

            entity.HasOne(d => d.Vendor).WithMany(p => p.UniversalBiometricOperations)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("UniversalBiometricOperations_Vendors_Id_fk");
        });

        modelBuilder.Entity<UniversalBiometricOperationToProfile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("UniversalBiometricToProfiles_pk");

            entity.HasOne(d => d.Operation).WithMany(p => p.UniversalBiometricOperationToProfiles)
                .HasForeignKey(d => d.OperationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("UniversalBiometricOperationToProfiles_UniversalBiometricOperations_Id_fk");

            entity.HasOne(d => d.Profile).WithMany(p => p.UniversalBiometricOperationToProfiles)
                .HasForeignKey(d => d.ProfileId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("UniversalBiometricOperationToProfiles_UniversalBiometricProfiles_Id_fk");
        });

        modelBuilder.Entity<UniversalBiometricProfile>(entity =>
        {
            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Address).HasMaxLength(200);
            entity.Property(e => e.BirthAddress).HasMaxLength(200);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentNumber).HasMaxLength(50);
            entity.Property(e => e.EventDate).HasColumnType("datetime");
            entity.Property(e => e.ExpDate).HasColumnType("datetime");
            entity.Property(e => e.FaceId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Gender).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.IssuingCountry).HasMaxLength(200);
            entity.Property(e => e.MigrationDocumentType).HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Nationality).HasMaxLength(50);
            entity.Property(e => e.Organization).HasMaxLength(200);
            entity.Property(e => e.Patronymic).HasMaxLength(100);
            entity.Property(e => e.PersonId)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Photo).HasMaxLength(200);
            entity.Property(e => e.Pin)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Surname).HasMaxLength(100);
            entity.Property(e => e.Uid).HasColumnName("UId");

            entity.HasOne(d => d.DocumentType).WithMany(p => p.UniversalBiometricProfiles)
                .HasForeignKey(d => d.DocumentTypeId)
                .HasConstraintName("UniversalBiometricProfiles_DocumentTypes_Id_fk");

            entity.HasOne(d => d.Partner).WithMany(p => p.UniversalBiometricProfiles)
                .HasForeignKey(d => d.PartnerId)
                .HasConstraintName("UniversalBiometricProfiles_Partners_Id_fk");

            entity.HasOne(d => d.Vendor).WithMany(p => p.UniversalBiometricProfiles)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("UniversalBiometricProfiles_Vendors_Id_fk");
        });

        modelBuilder.Entity<UniversalBiometricServiceType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("UniversalBiometricServiceTypes_pk");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UniversalBiometricServiceTypePartner>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("UniversalBiometricServiceTypePartner_pk");

            entity.ToTable("UniversalBiometricServiceTypePartner");

            entity.HasOne(d => d.Partner).WithMany(p => p.UniversalBiometricServiceTypePartners)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("UniversalBiometricServiceTypePartner_Partners_Id_fk");

            entity.HasOne(d => d.ServiceType).WithMany(p => p.UniversalBiometricServiceTypePartners)
                .HasForeignKey(d => d.ServiceTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("UniversalBiometricServiceTypePartner_UniversalBiometricServiceTypes_Id_fk");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC07A86333D5");

            entity.Property(e => e.PasswordHash).IsRequired();
            entity.Property(e => e.Salt).IsRequired();
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Vendors_pk");

            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Test).HasDefaultValue(true);
        });

        modelBuilder.Entity<Verifier>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Url).HasMaxLength(250);
            entity.Property(e => e.VerificationThreshold).HasColumnName("verification_threshold");
            entity.Property(e => e.VlverifierId)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("VLVerifierId");

            entity.HasOne(d => d.Partner).WithMany(p => p.Verifiers)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Verifiers_Partners1");
        });

        modelBuilder.Entity<Vlrule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_VendorOptions");

            entity.ToTable("VLRules");

            entity.Property(e => e.ConsiderEyeStatus).HasDefaultValue(false);
            entity.Property(e => e.ConsiderGlasses).HasDefaultValue(false);
            entity.Property(e => e.ConsiderMask).HasDefaultValue(false);
            entity.Property(e => e.DbHandler).HasMaxLength(100);
            entity.Property(e => e.IdentificationHandler).HasMaxLength(100);
            entity.Property(e => e.ListId).HasMaxLength(100);
            entity.Property(e => e.LunaAccountId).HasMaxLength(50);
            entity.Property(e => e.VlhandlerId)
                .HasMaxLength(100)
                .HasColumnName("VLHandlerId");
            entity.Property(e => e.VlverifierId)
                .HasMaxLength(100)
                .HasColumnName("VLVerifierId");

            entity.HasOne(d => d.Partner).WithMany(p => p.Vlrules)
                .HasForeignKey(d => d.PartnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("VLRules_Partners_Id_fk");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}